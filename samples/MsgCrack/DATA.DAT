DialogProc<>DialogProc<>INT_PTR CALLBACK\r\nDialogProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
DialogProcDx<>DialogProcDx<>virtual INT_PTR CALLBACK\r\nDialogProcDx(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
WM_ACTIVATE<>OnActivate<>void OnActivate(HWND hwnd, UINT state, HWND hwndActDeact, BOOL fMinimized)
WM_ACTIVATEAPP<>OnActivateApp<>void OnActivateApp(HWND hwnd, BOOL fActivate, DWORD dwThreadId)
WM_ASKCBFORMATNAME<>OnAskCBFormatName<>void OnAskCBFormatName(HWND hwnd, int cchMax, LPTSTR rgchName)
WM_CANCELMODE<>OnCancelMode<>void OnCancelMode(HWND hwnd)
WM_CHANGECBCHAIN<>OnChangeCBChain<>void OnChangeCBChain(HWND hwnd, HWND hwndRemove, HWND hwndNext)
WM_CHAR<>OnChar<>void OnChar(HWND hwnd, TCHAR ch, int cRepeat)
WM_CHARTOITEM<>OnCharToItem<>int OnCharToItem(HWND hwnd, UINT ch, HWND hwndListbox, int iCaret)
WM_CHILDACTIVATE<>OnChildActivate<>void OnChildActivate(HWND hwnd)
WM_CLEAR<>OnClear<>void OnClear(HWND hwnd)
WM_CLOSE<>OnClose<>void OnClose(HWND hwnd)
WM_COMMAND<>OnCommand<>void OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify)
WM_COMMNOTIFY<>OnCommNotify<>void OnCommNotify(HWND hwnd, int cid, UINT flags)
WM_COMPACTING<>OnCompacting<>void OnCompacting(HWND hwnd, UINT compactRatio)
WM_COMPAREITEM<>OnCompareItem<>int OnCompareItem(HWND hwnd, const COMPAREITEMSTRUCT * lpCompareItem)
WM_CONTEXTMENU<>OnContextMenu<>void OnContextMenu(HWND hwnd, HWND hwndContext, UINT xPos, UINT yPos)
WM_COPY<>OnCopy<>void OnCopy(HWND hwnd)
WM_COPYDATA<>OnCopyData<>BOOL OnCopyData(HWND hwnd, HWND hwndFrom, PCOPYDATASTRUCT pcds);
WM_CREATE<>OnCreate<>BOOL OnCreate(HWND hwnd, LPCREATESTRUCT lpCreateStruct)
WM_CTLCOLORBTN<>OnCtlColor<>HBRUSH OnCtlColor(HWND hwnd, HDC hdc, HWND hwndChild, int type)
WM_CTLCOLORDLG<>OnCtlColor<>HBRUSH OnCtlColor(HWND hwnd, HDC hdc, HWND hwndChild, int type)
WM_CTLCOLOREDIT<>OnCtlColor<>HBRUSH OnCtlColor(HWND hwnd, HDC hdc, HWND hwndChild, int type)
WM_CTLCOLORLISTBOX<>OnCtlColor<>HBRUSH OnCtlColor(HWND hwnd, HDC hdc, HWND hwndChild, int type)
WM_CTLCOLORMSGBOX<>OnCtlColor<>HBRUSH OnCtlColor(HWND hwnd, HDC hdc, HWND hwndChild, int type)
WM_CTLCOLORSCROLLBAR<>OnCtlColor<>HBRUSH OnCtlColor(HWND hwnd, HDC hdc, HWND hwndChild, int type)
WM_CTLCOLORSTATIC<>OnCtlColor<>HBRUSH OnCtlColor(HWND hwnd, HDC hdc, HWND hwndChild, int type)
WM_CUT<>OnCut<>void OnCut(HWND hwnd)
WM_DEADCHAR<>OnDeadChar<>void OnDeadChar(HWND hwnd, TCHAR ch, int cRepeat)
WM_DELETEITEM<>OnDeleteItem<>void OnDeleteItem(HWND hwnd, const DELETEITEMSTRUCT * lpDeleteItem)
WM_DESTROY<>OnDestroy<>void OnDestroy(HWND hwnd)
WM_DESTROYCLIPBOARD<>OnDestroyClipboard<>void OnDestroyClipboard(HWND hwnd)
WM_DEVICECHANGE<>OnDeviceChange<>BOOL OnDeviceChange(HWND hwnd, UINT uEvent, DWORD dwEventData)
WM_DEVMODECHANGE<>OnDevModeChange<>void OnDevModeChange(HWND hwnd, LPCTSTR lpszDeviceName)
WM_DISPLAYCHANGE<>OnDisplayChange<>void OnDisplayChange(HWND hwnd, UINT bitsPerPixel, UINT cxScreen, UINT cyScreen)
WM_DRAWCLIPBOARD<>OnDrawClipboard<>void OnDrawClipboard(HWND hwnd)
WM_DRAWITEM<>OnDrawItem<>void OnDrawItem(HWND hwnd, const DRAWITEMSTRUCT * lpDrawItem)
WM_DROPFILES<>OnDropFiles<>void OnDropFiles(HWND hwnd, HDROP hdrop)
WM_ENABLE<>OnEnable<>void OnEnable(HWND hwnd, BOOL fEnable)
WM_ENDSESSION<>OnEndSession<>void OnEndSession(HWND hwnd, BOOL fEnding)
WM_ENTERIDLE<>OnEnterIdle<>void OnEnterIdle(HWND hwnd, UINT source, HWND hwndSource)
WM_ERASEBKGND<>OnEraseBkgnd<>BOOL OnEraseBkgnd(HWND hwnd, HDC hdc)
WM_FONTCHANGE<>OnFontChange<>void OnFontChange(HWND hwnd)
WM_GETDLGCODE<>OnGetDlgCode<>UINT OnGetDlgCode(HWND hwnd, LPMSG lpmsg)
WM_GETFONT<>OnGetFont<>HFONT OnGetFont(HWND hwnd)
WM_GETMINMAXINFO<>OnGetMinMaxInfo<>void OnGetMinMaxInfo(HWND hwnd, LPMINMAXINFO lpMinMaxInfo)
WM_GETTEXT<>OnGetText<>INT OnGetText(HWND hwnd, int cchTextMax, LPTSTR lpszText)
WM_GETTEXTLENGTH<>OnGetTextLength<>INT OnGetTextLength(HWND hwnd)
WM_HOTKEY<>OnHotKey<>void OnHotKey(HWND hwnd, int idHotKey, UINT fuModifiers, UINT vk)
WM_HSCROLL<>OnHScroll<>void OnHScroll(HWND hwnd, HWND hwndCtl, UINT code, int pos)
WM_HSCROLLCLIPBOARD<>OnHScrollClipboard<>void OnHScrollClipboard(HWND hwnd, HWND hwndCBViewer, UINT code, int pos)
WM_ICONERASEBKGND<>OnIconEraseBkgnd<>BOOL OnIconEraseBkgnd(HWND hwnd, HDC hdc)
WM_INITDIALOG<>OnInitDialog<>BOOL OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam)
WM_INITMENU<>OnInitMenu<>void OnInitMenu(HWND hwnd, HMENU hMenu)
WM_INITMENUPOPUP<>OnInitMenuPopup<>void OnInitMenuPopup(HWND hwnd, HMENU hMenu, UINT item, BOOL fSystemMenu)
WM_KEYDOWN<>OnKey<>void OnKey(HWND hwnd, UINT vk, BOOL fDown, int cRepeat, UINT flags)
WM_KEYUP<>OnKey<>void OnKey(HWND hwnd, UINT vk, BOOL fDown, int cRepeat, UINT flags)
WM_KILLFOCUS<>OnKillFocus<>void OnKillFocus(HWND hwnd, HWND hwndNewFocus)
WM_LBUTTONDBLCLK<>OnLButtonDown<>void OnLButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT keyFlags)
WM_LBUTTONDOWN<>OnLButtonDown<>void OnLButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT keyFlags)
WM_LBUTTONUP<>OnLButtonUp<>void OnLButtonUp(HWND hwnd, int x, int y, UINT keyFlags)
WM_MBUTTONDBLCLK<>OnMButtonDown<>void OnMButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT keyFlags)
WM_MBUTTONDOWN<>OnMButtonDown<>void OnMButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT keyFlags)
WM_MBUTTONUP<>OnMButtonUp<>void OnMButtonUp(HWND hwnd, int x, int y, UINT flags)
WM_MDIACTIVATE<>MDIActivate<>void MDIActivate(HWND hwnd, BOOL fActive, HWND hwndActivate, HWND hwndDeactivate)
WM_MDICASCADE<>MDICascade<>BOOL MDICascade(HWND hwnd, UINT cmd)
WM_MDICREATE<>MDICreate<>HWND MDICreate(HWND hwnd, const LPMDICREATESTRUCT lpmcs)
WM_MDIDESTROY<>MDIDestroy<>void MDIDestroy(HWND hwnd, HWND hwndDestroy)
WM_MDIGETACTIVE<>MDIGetActive<>HWND MDIGetActive(HWND hwnd)
WM_MDIICONARRANGE<>MDIIconArrange<>void MDIIconArrange(HWND hwnd)
WM_MDIMAXIMIZE<>MDIMaximize<>void MDIMaximize(HWND hwnd, HWND hwndMaximize)
WM_MDINEXT<>MDINext<>HWND MDINext(HWND hwnd, HWND hwndCur, BOOL fPrev)
WM_MDIRESTORE<>MDIRestore<>void MDIRestore(HWND hwnd, HWND hwndRestore)
WM_MDISETMENU<>MDISetMenu<>HMENU MDISetMenu(HWND hwnd, BOOL fRefresh, HMENU hmenuFrame, HMENU hmenuWindow)
WM_MDITILE<>MDITile<>BOOL MDITile(HWND hwnd, UINT cmd)
WM_MEASUREITEM<>OnMeasureItem<>void OnMeasureItem(HWND hwnd, MEASUREITEMSTRUCT * lpMeasureItem)
WM_MENUCHAR<>OnMenuChar<>DWORD OnMenuChar(HWND hwnd, UINT ch, UINT flags, HMENU hmenu)
WM_MENUSELECT<>OnMenuSelect<>void OnMenuSelect(HWND hwnd, HMENU hmenu, int item, HMENU hmenuPopup, UINT flags)
WM_MOUSEACTIVATE<>OnMouseActivate<>int OnMouseActivate(HWND hwnd, HWND hwndTopLevel, UINT codeHitTest, UINT msg)
WM_MOUSEMOVE<>OnMouseMove<>void OnMouseMove(HWND hwnd, int x, int y, UINT keyFlags)
WM_MOUSEWHEEL<>OnMouseWheel<>void OnMouseWheel(HWND hwnd, int xPos, int yPos, int zDelta, UINT fwKeys)
WM_MOVE<>OnMove<>void OnMove(HWND hwnd, int x, int y)
WM_NCACTIVATE<>OnNCActivate<>BOOL OnNCActivate(HWND hwnd, BOOL fActive, HWND hwndActDeact, BOOL fMinimized)
WM_NCCALCSIZE<>OnNCCalcSize<>UINT OnNCCalcSize(HWND hwnd, BOOL fCalcValidRects, NCCALCSIZE_PARAMS * lpcsp)
WM_NCCREATE<>OnNCCreate<>BOOL OnNCCreate(HWND hwnd, LPCREATESTRUCT lpCreateStruct)
WM_NCDESTROY<>OnNCDestroy<>void OnNCDestroy(HWND hwnd)
WM_NCHITTEST<>OnNCHitTest<>UINT OnNCHitTest(HWND hwnd, int x, int y)
WM_NCLBUTTONDBLCLK<>OnNCLButtonDown<>void OnNCLButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT codeHitTest)
WM_NCLBUTTONDOWN<>OnNCLButtonDown<>void OnNCLButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT codeHitTest)
WM_NCLBUTTONUP<>OnNCLButtonUp<>void OnNCLButtonUp(HWND hwnd, int x, int y, UINT codeHitTest)
WM_NCMBUTTONDBLCLK<>OnNCMButtonDown<>void OnNCMButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT codeHitTest)
WM_NCMBUTTONDOWN<>OnNCMButtonDown<>void OnNCMButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT codeHitTest)
WM_NCMBUTTONUP<>OnNCMButtonUp<>void OnNCMButtonUp(HWND hwnd, int x, int y, UINT codeHitTest)
WM_NCMOUSEMOVE<>OnNCMouseMove<>void OnNCMouseMove(HWND hwnd, int x, int y, UINT codeHitTest)
WM_NCPAINT<>OnNCPaint<>void OnNCPaint(HWND hwnd, HRGN hrgn)
WM_NCRBUTTONDBLCLK<>OnNCRButtonDown<>void OnNCRButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT codeHitTest)
WM_NCRBUTTONDOWN<>OnNCRButtonDown<>void OnNCRButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT codeHitTest)
WM_NCRBUTTONUP<>OnNCRButtonUp<>void OnNCRButtonUp(HWND hwnd, int x, int y, UINT codeHitTest)
WM_NEXTDLGCTL<>OnNextDlgCtl<>HWND OnNextDlgCtl(HWND hwnd, HWND hwndSetFocus, BOOL fNext)
WM_NOTIFY<>OnNotify<>LRESULT OnNotify(HWND hwnd, int idFrom, LPNMHDR pnmhdr)
WM_PAINT<>OnPaint<>void OnPaint(HWND hwnd)
WM_PAINTCLIPBOARD<>OnPaintClipboard<>void OnPaintClipboard(HWND hwnd, HWND hwndCBViewer, const LPPAINTSTRUCT lpPaintStruct)
WM_PALETTECHANGED<>OnPaletteChanged<>void OnPaletteChanged(HWND hwnd, HWND hwndPaletteChange)
WM_PALETTEISCHANGING<>OnPaletteIsChanging<>void OnPaletteIsChanging(HWND hwnd, HWND hwndPaletteChange)
WM_PARENTNOTIFY<>OnParentNotify<>void OnParentNotify(HWND hwnd, UINT msg, HWND hwndChild, int idChild)
WM_PASTE<>OnPaste<>void OnPaste(HWND hwnd)
WM_POWER<>OnPower<>void OnPower(HWND hwnd, int code)
WM_QUERYDRAGICON<>OnQueryDragIcon<>HICON OnQueryDragIcon(HWND hwnd)
WM_QUERYENDSESSION<>OnQueryEndSession<>BOOL OnQueryEndSession(HWND hwnd)
WM_QUERYNEWPALETTE<>OnQueryNewPalette<>BOOL OnQueryNewPalette(HWND hwnd)
WM_QUERYOPEN<>OnQueryOpen<>BOOL OnQueryOpen(HWND hwnd)
WM_QUEUESYNC<>OnQueueSync<>void OnQueueSync(HWND hwnd)
WM_QUIT<>OnQuit<>void OnQuit(HWND hwnd, int exitCode)
WM_RBUTTONDBLCLK<>OnRButtonDown<>void OnRButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT keyFlags)
WM_RBUTTONDOWN<>OnRButtonDown<>void OnRButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT keyFlags)
WM_RBUTTONUP<>OnRButtonUp<>void OnRButtonUp(HWND hwnd, int x, int y, UINT flags)
WM_RENDERALLFORMATS<>OnRenderAllFormats<>void OnRenderAllFormats(HWND hwnd)
WM_RENDERFORMAT<>OnRenderFormat<>HANDLE OnRenderFormat(HWND hwnd, UINT fmt)
WM_SETCURSOR<>OnSetCursor<>BOOL OnSetCursor(HWND hwnd, HWND hwndCursor, UINT codeHitTest, UINT msg)
WM_SETFOCUS<>OnSetFocus<>void OnSetFocus(HWND hwnd, HWND hwndOldFocus)
WM_SETFONT<>OnSetFont<>void OnSetFont(HWND hwndCtl, HFONT hfont, BOOL fRedraw)
WM_SETREDRAW<>OnSetRedraw<>void OnSetRedraw(HWND hwnd, BOOL fRedraw)
WM_SETTEXT<>OnSetText<>void OnSetText(HWND hwnd, LPCTSTR lpszText)
WM_SHOWWINDOW<>OnShowWindow<>void OnShowWindow(HWND hwnd, BOOL fShow, UINT status)
WM_SIZE<>OnSize<>void OnSize(HWND hwnd, UINT state, int cx, int cy)
WM_SIZECLIPBOARD<>OnSizeClipboard<>void OnSizeClipboard(HWND hwnd, HWND hwndCBViewer, const LPRECT lprc)
WM_SPOOLERSTATUS<>OnSpoolerStatus<>void OnSpoolerStatus(HWND hwnd, UINT status, int cJobInQueue)
WM_SYSCHAR<>OnSysChar<>void OnSysChar(HWND hwnd, TCHAR ch, int cRepeat)
WM_SYSCOLORCHANGE<>OnSysColorChange<>void OnSysColorChange(HWND hwnd)
WM_SYSCOMMAND<>OnSysCommand<>void OnSysCommand(HWND hwnd, UINT cmd, int x, int y)
WM_SYSDEADCHAR<>OnSysDeadChar<>void OnSysDeadChar(HWND hwnd, TCHAR ch, int cRepeat)
WM_SYSKEYDOWN<>OnSysKey<>void OnSysKey(HWND hwnd, UINT vk, BOOL fDown, int cRepeat, UINT flags)
WM_SYSKEYUP<>OnSysKey<>void OnSysKey(HWND hwnd, UINT vk, BOOL fDown, int cRepeat, UINT flags)
WM_SYSTEMERROR<>OnSystemError<>void OnSystemError(HWND hwnd, int errCode)
WM_TIMECHANGE<>OnTimeChange<>void OnTimeChange(HWND hwnd)
WM_TIMER<>OnTimer<>void OnTimer(HWND hwnd, UINT id)
WM_UNDO<>OnUndo<>void OnUndo(HWND hwnd)
WM_VKEYTOITEM<>OnVkeyToItem<>int OnVkeyToItem(HWND hwnd, UINT vk, HWND hwndListbox, int iCaret)
WM_VSCROLL<>OnVScroll<>void OnVScroll(HWND hwnd, HWND hwndCtl, UINT code, int pos)
WM_VSCROLLCLIPBOARD<>OnVScrollClipboard<>void OnVScrollClipboard(HWND hwnd, HWND hwndCBViewer, UINT code, int pos)
WM_WINDOWPOSCHANGED<>OnWindowPosChanged<>void OnWindowPosChanged(HWND hwnd, const LPWINDOWPOS lpwpos)
WM_WINDOWPOSCHANGING<>OnWindowPosChanging<>BOOL OnWindowPosChanging(HWND hwnd, LPWINDOWPOS lpwpos)
WM_WININICHANGE<>OnWinIniChange<>void OnWinIniChange(HWND hwnd, LPCTSTR lpszSectionName)
WinMain<>WinMain<>INT WINAPI\r\nWinMain(HINSTANCE   hInstance,\r\n        HINSTANCE   hPrevInstance,\r\n        LPSTR       lpCmdLine,\r\n        INT         nCmdShow)
WindowProc<>WindowProc<>LRESULT CALLBACK\r\nWindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
WindowProcDx<>WindowProcDx<>virtual LRESULT CALLBACK\r\nWindowProcDx(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
_tWinMain<>_tWinMain<>extern "C" INT WINAPI\r\n_tWinMain(HINSTANCE   hInstance,\r\n          HINSTANCE   hPrevInstance,\r\n          LPTSTR      lpCmdLine,\r\n          INT         nCmdShow)
wWinMain<>wWinMain<>extern "C" INT WINAPI\r\nwWinMain(HINSTANCE   hInstance,\r\n         HINSTANCE   hPrevInstance,\r\n         LPWSTR      lpCmdLine,\r\n         INT         nCmdShow)
OnMessage<>OnMessage<>LRESULT OnMessage(HWND hwnd, WPARAM wParam, LPARAM lParam)
OnMessageEx<>OnMessageEx<>LRESULT OnMessageEx(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
MWindowClass<>MWindowClass<>class MWindowClass : public MWindowBase\r\n{\r\npublic:\r\n    MWindowClass()\r\n    {\r\n    }\r\n\r\n    virtual ~MWindowClass()\r\n    {\r\n    }\r\n\r\n    virtual LPCTSTR GetWndClassNameDx() const\r\n    {\r\n        return TEXT("MZC4 MWindowClass Class");\r\n    }\r\n\r\n    virtual VOID ModifyWndClassDx(WNDCLASSEX& wcx)\r\n    {\r\n    }\r\n\r\n    BOOL OnCreate(HWND hwnd, LPCREATESTRUCT lpCreateStruct)\r\n    {\r\n        return TRUE;\r\n    }\r\n\r\n    virtual LRESULT CALLBACK\r\n    WindowProcDx(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\r\n    {\r\n        switch (uMsg)\r\n        {\r\n        HANDLE_MSG(hwnd, WM_CREATE, OnCreate);\r\n        default:\r\n            return DefaultProcDx();\r\n        }\r\n    }\r\n};
MDialogClass<>MDialogClass<>class MDialogClass : public MDialogBase\r\n{\r\npublic:\r\n    MDialogClass()\r\n    {\r\n    }\r\n\r\n    virtual ~MDialogClass()\r\n    {\r\n    }\r\n\r\n    BOOL OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam)\r\n    {\r\n        return TRUE;\r\n    }\r\n\r\n    void OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify)\r\n    {\r\n        switch (id)\r\n        {\r\n        case IDOK:\r\n            EndDialog(IDOK);\r\n            break;\r\n        case IDCANCEL:\r\n            EndDialog(IDCANCEL);\r\n            break;\r\n        }\r\n    }\r\n\r\n    virtual INT_PTR CALLBACK\r\n    DialogProcDx(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\r\n    {\r\n        switch (uMsg)\r\n        {\r\n        HANDLE_MSG(hwnd, WM_INITDIALOG, OnInitDialog);\r\n        HANDLE_MSG(hwnd, WM_COMMAND, OnCommand);\r\n        default:\r\n            return DefaultProcDx();\r\n        }\r\n    }\r\n};\r\n
CMakeLists.txt<>CMakeLists.txt<># CMakeLists.txt --- CMake project settings\r\n#    ex) cmake -G "Visual Studio 9 2008"\r\n#    ex) cmake -DCMAKE_BUILD_TYPE=Release -G "MSYS Makefiles"\r\n##############################################################################\r\n\r\n# CMake minimum version\r\ncmake_minimum_required(VERSION 2.4)\r\n\r\n# project name and language\r\nproject(MyProject CXX)\r\n\r\n# check build type\r\nif (NOT CMAKE_BUILD_TYPE)\r\n    message(STATUS "No build type selected, default to Debug")\r\n    set(CMAKE_BUILD_TYPE "Debug")\r\nendif()\r\n\r\n# make uppercase string of build type\r\nstring(TOUPPER "${CMAKE_BUILD_TYPE}" uppercase_CMAKE_BUILD_TYPE)\r\n\r\n# check build type again\r\nif (NOT uppercase_CMAKE_BUILD_TYPE MATCHES "^(DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL)$")\r\n    message(FATAL_ERROR "Invalid value for CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")\r\nendif()\r\n\r\n# set output directory (build/)\r\nset(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)\r\nset(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})\r\nset(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})\r\n\r\n# enable Win32 resource\r\nenable_language(RC)\r\n\r\nif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")\r\n    # using Clang\r\n    set(CMAKE_C_FLAGS "-static")\r\n    set(CMAKE_CXX_FLAGS "-static")\r\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")\r\n    # using GCC\r\n    set(CMAKE_C_FLAGS "-static -static-libgcc -static-libstdc++")\r\n    set(CMAKE_CXX_FLAGS "-static -static-libgcc -static-libstdc++")\r\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")\r\n    # replace "/MD" with "/MT" (building without runtime DLLs)\r\n    set(CompilerFlags\r\n        CMAKE_C_FLAGS\r\n        CMAKE_C_FLAGS_DEBUG\r\n        CMAKE_C_FLAGS_RELEASE\r\n        CMAKE_C_FLAGS_RELWITHDEBINFO\r\n        CMAKE_CXX_FLAGS\r\n        CMAKE_CXX_FLAGS_DEBUG\r\n        CMAKE_CXX_FLAGS_RELEASE\r\n        CMAKE_CXX_FLAGS_RELWITHDEBINFO)\r\n    foreach(CompilerFlags ${CompilerFlags})\r\n        string(REPLACE "/MD" "/MT" ${CompilerFlags} "${${CompilerFlags}}")\r\n    endforeach()\r\nendif()\r\n\r\n##############################################################################\r\n\r\n# executable\r\nadd_executable(MyProject WIN32 MyProject.cpp MyProject_res.rc)\r\n\r\n##############################################################################\r\n
MMainWnd<>MMainWnd<>class MMainWnd : public MWindowBase\r\n{\r\npublic:\r\n    INT         m_argc;         // number of command line parameters\r\n    TCHAR **    m_targv;        // command line parameters\r\n    HINSTANCE   m_hInst;        // the instance handle\r\n    HICON       m_hIcon;        // the main icon\r\n    HICON       m_hIconSm;      // the small icon\r\n    HACCEL      m_hAccel;       // the access keys\r\n\r\n    MMainWnd(INT argc, TCHAR **targv, HINSTANCE hInst)\r\n        : m_argc(argc), m_targv(targv), m_hInst(hInst),\r\n          m_hIcon(NULL), m_hIconSm(NULL), m_hAccel(NULL)\r\n    {\r\n    }\r\n\r\n    virtual ~MMainWnd()\r\n    {\r\n    }\r\n\r\n    virtual LPCTSTR GetWndClassNameDx() const\r\n    {\r\n        return TEXT("MZC4 MMainWnd Class");\r\n    }\r\n\r\n    virtual VOID ModifyWndClassDx(WNDCLASSEX& wcx)\r\n    {\r\n        wcx.lpszMenuName = MAKEINTRESOURCE(1);\r\n        wcx.hIcon = m_hIcon;\r\n        wcx.hIconSm = m_hIconSm;\r\n    }\r\n\r\n    BOOL OnCreate(HWND hwnd, LPCREATESTRUCT lpCreateStruct)\r\n    {\r\n        return TRUE;\r\n    }\r\n\r\n    void OnDestroy(HWND hwnd)\r\n    {\r\n        ::PostQuitMessage(0);\r\n    }\r\n\r\n    virtual LRESULT CALLBACK\r\n    WindowProcDx(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\r\n    {\r\n        switch (uMsg)\r\n        {\r\n        HANDLE_MSG(hwnd, WM_CREATE, OnCreate);\r\n        HANDLE_MSG(hwnd, WM_DESTROY, OnDestroy);\r\n        default:\r\n            return DefaultProcDx();\r\n        }\r\n    }\r\n\r\n    BOOL StartDx(INT nCmdShow)\r\n    {\r\n        m_hIcon = LoadIconDx(1);\r\n        m_hIconSm = LoadSmallIconDx(1);\r\n        m_hAccel = ::LoadAccelerators(m_hInst, MAKEINTRESOURCE(1));\r\n\r\n        if (!CreateWindowDx(NULL, LoadStringDx(1)))\r\n        {\r\n            MsgBoxDx(TEXT("failure of CreateWindow"), NULL, MB_ICONERROR);\r\n            return FALSE;\r\n        }\r\n\r\n        ::ShowWindow(*this, nCmdShow);\r\n        ::UpdateWindow(*this);\r\n\r\n        return TRUE;\r\n    }\r\n\r\n    INT RunDx()\r\n    {\r\n        // message loop\r\n        MSG msg;\r\n        while (::GetMessage(&msg, NULL, 0, 0))\r\n        {\r\n            if (!::TranslateAccelerator(m_hwnd, m_hAccel, &msg))\r\n            {\r\n                ::TranslateMessage(&msg);\r\n                ::DispatchMessage(&msg);\r\n            }\r\n        }\r\n        return INT(msg.wParam);\r\n    }\r\n};\r\n
MMainDlg<>MMainDlg<>class MMainDlg : public MDialogBase\r\n{\r\npublic:\r\n    INT         m_argc;         // number of command line parameters\r\n    TCHAR **    m_targv;        // command line parameters\r\n    HINSTANCE   m_hInst;        // the instance handle\r\n    HICON       m_hIcon;        // the main icon\r\n    HICON       m_hIconSm;      // the small icon\r\n\r\n    MMainDlg(INT argc, TCHAR **targv, HINSTANCE hInst)\r\n        : MDialogBox(1), m_argc(argc), m_targv(targv), m_hInst(hInst),\r\n          m_hIcon(NULL), m_hIconSm(NULL)\r\n    {\r\n    }\r\n\r\n    virtual ~MMainDlg()\r\n    {\r\n    }\r\n\r\n    BOOL OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam)\r\n    {\r\n        return TRUE;\r\n    }\r\n\r\n    void OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify)\r\n    {\r\n        switch (id)\r\n        {\r\n        case IDOK:\r\n            EndDialog(IDOK);\r\n            break;\r\n        case IDCANCEL:\r\n            EndDialog(IDCANCEL);\r\n            break;\r\n        }\r\n    }\r\n\r\n    virtual INT_PTR CALLBACK\r\n    DialogProcDx(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\r\n    {\r\n        switch (uMsg)\r\n        {\r\n        HANDLE_MSG(hwnd, WM_INITDIALOG, OnInitDialog);\r\n        HANDLE_MSG(hwnd, WM_COMMAND, OnCommand);\r\n        default:\r\n            return DefaultProcDx();\r\n        }\r\n    }\r\n\r\n    BOOL StartDx(INT nCmdShow)\r\n    {\r\n        m_hIcon = LoadIconDx(1);\r\n        m_hIconSm = LoadSmallIconDx(1);\r\n\r\n        return TRUE;\r\n    }\r\n\r\n    INT RunDx()\r\n    {\r\n        return INT(DialogBoxDx(NULL));\r\n    }\r\n};\r\n
targetver.h<>targetver.h<>// targetver.h --- target versioning header for Win             -*- C++ -*-\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n// targetver.h is used to define the Win32API macros that target the \r\n// version of the Win you wish to support.\r\n\r\n// For Win95\r\n//#define WINVER          0x0400\r\n//#define _WIN32_WINDOWS  0x0400\r\n//#define _WIN32_WINNT    0x0400\r\n//#define _WIN32_IE       0x0300\r\n\r\n// For Win98\r\n//#define WINVER          0x0410\r\n//#define _WIN32_WINDOWS  0x0410\r\n//#define _WIN32_WINNT    0x0410\r\n//#define _WIN32_IE       0x0401\r\n\r\n// For WinNT4\r\n//#define WINVER          0x0400\r\n//#define _WIN32_WINNT    0x0400\r\n//#define _WIN32_IE       0x0200\r\n//#define NTDDI_VERSION   0x05000000\r\n\r\n// For WinME\r\n//#define WINVER          0x0500\r\n//#define _WIN32_WINNT    0x0500\r\n//#define _WIN32_IE       0x0500\r\n\r\n// For Win2000\r\n//#define WINVER          0x0500\r\n//#define _WIN32_WINNT    0x0500\r\n//#define _WIN32_IE       0x0500\r\n//#define NTDDI_VERSION   0x05000000\r\n\r\n// For WinXP\r\n#define WINVER          0x0501\r\n#define _WIN32_WINNT    0x0501\r\n#define _WIN32_IE       0x0501\r\n#define NTDDI_VERSION   0x05010000\r\n\r\n// For WinVista\r\n//#define WINVER          0x0600\r\n//#define _WIN32_WINNT    0x0600\r\n//#define _WIN32_IE       0x0600\r\n//#define NTDDI_VERSION   0x06000000\r\n\r\n// For Win7\r\n//#define WINVER          0x0601\r\n//#define _WIN32_WINNT    0x0601\r\n//#define _WIN32_IE       0x0601\r\n//#define NTDDI_VERSION   0x06010000\r\n\r\n// For Win8.1\r\n//#define WINVER          0x0602\r\n//#define _WIN32_WINNT    0x0602\r\n//#define _WIN32_IE       0x0602\r\n//#define NTDDI_VERSION   0x06030000\r\n\r\n// For Win10\r\n//#define WINVER          0x0A00\r\n//#define _WIN32_WINNT    0x0A00\r\n//#define _WIN32_IE       0x0A00\r\n//#define NTDDI_VERSION   0x0A000000\r\n\r\n// Users of Visual Studio 10+ can do this instead\r\n// #include "SDKDDKver.h"\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n
.gitignore<>.gitignore<>*.autosave\r\n*.cmake\r\n*.dir\r\n*.exe\r\n*.filters\r\n*.idb\r\n*.map\r\n*.ncb\r\n*.o\r\n*.obj\r\n*.opensdf\r\n*.res\r\n*.sdf\r\n*.sln\r\n*.suo\r\n*.tds\r\n*.user\r\n*.vcproj\r\n*.vcxproj\r\n*~\r\n.vs\r\nCMakeCache.txt\r\nCMakeFiles\r\nDebug\r\nMakefile\r\nRelease\r\nTMP1.$$$\r\nbuild\r\nipch\r\nx64\r\n
